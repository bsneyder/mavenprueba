# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: [ main ]

jobs:

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2         
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Test
        run: mvn --batch-mode test
        

  publish-artifact-registry:
    runs-on: ubuntu-latest
    needs: [unit-test]
    permissions: 
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Set up Maven Settings for deploy
        uses: s4u/maven-settings-action@v2.1.1
      - name: Publish package
      ##  run: mvn --batch-mode deploy
        env:
          GITHUB_USERNAME: ${{ secrets.USERNAMEGITHUB }}
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
       ## run: mvn --settings settings.xml --file pom.xml deploy
       ## run: mvn clean source:jar deploy -DuniqueVersion=false -Dmaven.source.useDefaultManifestFile=true -Dmaven.source.includePom=true -Dmaven.install.skip=true -DdeplyAtEnd=true -DaltDeploymentRepository='github::default::https://maven.pkg.github.com/jesusrh12/ffm-ne-back-jv-lib-commons'
        run: mvn source:jar deploy -DuniqueVersion=false -Dmaven.source.useDefaultManifestFile=true -Dmaven.source.includePom=true -DaltDeploymentRepository='github::default::https://maven.pkg.github.com/bsneyder/mavenprueba'
        

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
    # Container registry username
          username: ${{ secrets.AZURE_USERNAME }}
    # Container registry password
          password: ${{ secrets.AZURE_PASSWORD }}
    # Container registry server url
          login-server: ${{ secrets.AZURE_SERVER_REGISTRY }}
      - name: azure push
        env:
         # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: registrycloster 
          IMAGE_TAG: latest
        run: docker push registrycloster.azurecr.io/$REPOSITORY:IMAGE_TAG

      
        
       


        
